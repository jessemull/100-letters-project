name: Build, Test, and Deploy to S3

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Next.js
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Next.js
        run: |
          NODE_ENV=production npm run build
          
      - name: Archive Static Build Output
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: out
          retention-days: 1

  test:
    name: Run Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Jest Tests
        run: npm run test

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage
          retention-days: 7

      - name: Coverage Threshold Check
        run: |
          if [[ $(grep "Statements" coverage/lcov-report/index.html | awk '{print $4}' | tr -d '%') -lt 80 ]]; then
            echo "Code coverage is below threshold. Please update test coverage and try again."
            exit 1
          fi

  deploy:
    name: Deploy to S3
    needs: test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Download Static Build Output
        uses: actions/download-artifact@v4
        with:
          name: next-build
          path: next-build

      - name: Backup S3
        id: backup_s3
        run: |
          aws s3 rm s3://${{ secrets.AWS_S3_BUCKET_BACKUP }}/ --recursive
          aws s3 sync s3://${{ secrets.AWS_S3_BUCKET }} s3://${{ secrets.AWS_S3_BUCKET_BACKUP }}/ --exact-timestamps
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_S3_BUCKET_BACKUP: ${{ secrets.AWS_S3_BUCKET_BACKUP }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        uses: jakejarvis/s3-sync-action@v0.5.0
        with:
          args: --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SOURCE_DIR: 'next-build'

      - name: Invalidate CloudFront Cache
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: "/*"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Run Lighthouse Tests
        id: lighthouse
        run: |
          npm ci
          NODE_ENV=production npx lhci autorun --url=https://onehundredletters.com
        continue-on-error: true

      - name: Check Lighthouse Results
        run: |
          if [[ ${{ steps.lighthouse.outcome }} == 'failure' ]]; then
            echo "Lighthouse tests failed. Reverting deployment."
            # Rollback by restoring the backup
            aws s3 sync s3://${{ secrets.AWS_S3_BUCKET_BACKUP }}/ s3://${{ secrets.AWS_S3_BUCKET }} --delete
            # Invalidate the cache to reflect the restored version
            aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
            exit 1
          fi
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_S3_BUCKET_BACKUP: ${{ secrets.AWS_S3_BUCKET_BACKUP }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
