name: Build, Test, and Deploy to S3

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose environment (test/production)'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - production

jobs:
  build:
    name: Build Next.js
    outputs:
      AWS_S3_BUCKET: ${{ steps.set_env.outputs.AWS_S3_BUCKET }}
      AWS_S3_BUCKET_BACKUP: ${{ steps.set_env.outputs.AWS_S3_BUCKET_BACKUP }}
      AWS_CLOUDFRONT_DISTRIBUTION_ID: ${{ steps.set_env.outputs.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
      E2E_TEST_URL: ${{ steps.set_env.outputs.E2E_TEST_URL }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Set Environment Variables
        id: set_env
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'test' }}
          echo "$ENVIRONMENT"
          if [[ "$ENVIRONMENT" == "production" ]]; then
            echo "SETTING_PROD"
            echo "AWS_S3_BUCKET=100-letters-project-client-prod" >> $GITHUB_OUTPUT
            echo "AWS_S3_BUCKET_BACKUP=100-letters-project-client-backup-prod" >> $GITHUB_OUTPUT
            echo "AWS_CLOUDFRONT_DISTRIBUTION_ID=${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID_PROD }}" >> $GITHUB_OUTPUT
            echo "E2E_TEST_URL=${{ secrets.E2E_TEST_URL_PROD }}" >> $GITHUB_OUTPUT
          else
            echo "SETTING TEST"
            echo "AWS_S3_BUCKET=100-letters-project-client-dev" >> $GITHUB_OUTPUT
            echo "AWS_S3_BUCKET_BACKUP=100-letters-project-client-backup-dev" >> $GITHUB_OUTPUT
            echo "AWS_CLOUDFRONT_DISTRIBUTION_ID=${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID_DEV }}" >> $GITHUB_OUTPUT
            echo "E2E_TEST_URL=${{ secrets.E2E_TEST_URL_DEV }}" >> $GITHUB_OUTPUT
          fi

          # Optional: print variables to the logs (useful for debugging)
          echo "$AWS_S3_BUCKET=$AWS_S3_BUCKET"
          echo "$AWS_S3_BUCKET_BACKUP=$AWS_S3_BUCKET_BACKUP"
          echo "$AWS_CLOUDFRONT_DISTRIBUTION_ID=$AWS_CLOUDFRONT_DISTRIBUTION_ID"
          echo "$E2E_TEST_URL=$E2E_TEST_URL"

      - name: Build Next.js
        run: |
          echo "Deploying to ${{ github.event.inputs.environment }} environment"
          NODE_ENV=${{ github.event.inputs.environment }} npm run build

      - name: Copy Sitemap and Robots Files
        run: |
          cp public/sitemap.xml out/
          cp public/robots.txt out/
          cp public/sitemap-0.xml out/

      - name: Archive Build Output
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: out
          retention-days: 1

  test:
    name: Run Unit Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Jest Tests
        run: npm run test

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage
          retention-days: 7

      - name: Coverage Threshold Check
        run: |
          if [[ $(grep "Statements" coverage/lcov-report/index.html | awk '{print $4}' | tr -d '%') -lt 80 ]]; then
            echo "Code coverage is below threshold. Please update test coverage and try again."
            exit 1
          fi

  backup_s3:
    name: Backup S3
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      BACKUP_DIR: ${{ steps.timestamp.outputs.BACKUP_DIR }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Generate Timestamp
        id: timestamp
        run: echo "BACKUP_DIR=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Backup S3
        run: |
          echo "AWS_S3_BUCKET: ${{ needs.build.outputs }}"
          echo "AWS_S3_BUCKET: ${{ needs.build.outputs.AWS_S3_BUCKET }}"
          echo "AWS_S3_BUCKET_BACKUP: ${{ needs.build.outputs.AWS_S3_BUCKET_BACKUP }}"
          aws s3 sync s3://${{ needs.build.outputs.AWS_S3_BUCKET }} s3://${{ needs.build.outputs.AWS_S3_BUCKET_BACKUP }}/${{ steps.timestamp.outputs.BACKUP_DIR }}/ --exact-timestamps
        env:
          AWS_S3_BUCKET: ${{ needs.build.outputs.AWS_S3_BUCKET }}
          AWS_S3_BUCKET_BACKUP: ${{ needs.build.outputs.AWS_S3_BUCKET_BACKUP }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Save Backup Directory
        run: echo "BACKUP_DIR=$BACKUP_DIR" >> $GITHUB_ENV

  deploy_to_s3:
    name: Deploy to S3
    needs: backup_s3
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Download Build Output
        uses: actions/download-artifact@v4
        with:
          name: next-build
          path: next-build

      - name: Deploy to S3
        uses: jakejarvis/s3-sync-action@v0.5.0
        with:
          args: --delete
        env:
          AWS_S3_BUCKET: ${{ needs.build.outputs.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SOURCE_DIR: 'next-build'

      - name: Invalidate CloudFront Cache
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ needs.build.outputs.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: "/*"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

  e2e_tests_prod:
    name: Run E2E Tests (Production)
    needs: deploy_to_s3
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Cypress Tests
        run: NODE_ENV=${{ github.event.inputs.environment || 'test' }} npm run e2e

  lighthouse_tests:
    name: Run Lighthouse Tests
    needs: deploy_to_s3
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Lighthouse Tests
        id: lighthouse
        run: |
          npm ci
          NODE_ENV=${{ github.event.inputs.environment || 'test' }} npx lhci autorun --url=${{ needs.build.outputs.E2E_TEST_URL }}
        continue-on-error: true

  rollback:
    name: Revert S3 Deployment
    needs: lighthouse_tests
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && failure()
    runs-on: ubuntu-latest
    steps:
      - name: Restore Latest Backup
        run: |
          echo "Lighthouse tests failed. Reverting S3 deployment from backup directory: ${{ needs.backup_s3.outputs.BACKUP_DIR }}."
          aws s3 sync s3://${{ needs.build.outputs.AWS_S3_BUCKET_BACKUP }}/${{ needs.backup_s3.outputs.BACKUP_DIR }}/ s3://${{ needs.build.outputs.AWS_S3_BUCKET }} --delete
          aws cloudfront create-invalidation --distribution-id ${{ needs.build.outputs.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
        env:
          AWS_S3_BUCKET: ${{ needs.build.outputs.AWS_S3_BUCKET }}
          AWS_S3_BUCKET_BACKUP: ${{ needs.build.outputs.AWS_S3_BUCKET_BACKUP }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_CLOUDFRONT_DISTRIBUTION_ID: ${{ needs.build.outputs.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
          BACKUP_DIR: ${{ needs.backup_s3.outputs.BACKUP_DIR }}
  
